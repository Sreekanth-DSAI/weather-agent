import requests
import json
import os
import sqlite3
from dotenv import load_dotenv
import google.generativeai as genai
from fastapi import FastAPI, HTTPException, Query, Depends, Security, status
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security.api_key import APIKeyHeader
from pydantic import BaseModel
from typing import List
from datetime import datetime

# Load environment variables
load_dotenv()
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
API_KEY = os.getenv("API_KEY")  # For API key authentication
WEATHER_API_URL = "http://api.openweathermap.org/data/2.5/weather"

# Configure Gemini API
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
else:
    print("Warning: GEMINI_API_KEY not found in .env. Using mock response.")

# FastAPI app
app = FastAPI(title="Weather AI Agent API", version="1.0.0")

# Enable CORS for external apps
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Update to specific domains in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files for front-end
app.mount("/static", StaticFiles(directory="."), name="static")

# API key authentication
API_KEY_NAME = "X-API-Key"
api_key_header = APIKeyHeader(name=API_KEY_NAME, auto_error=False)

async def get_api_key(api_key: str = Security(api_key_header)):
    if api_key == API_KEY:
        return api_key
    raise HTTPException(
        status_code=status.HTTP_403_FORBIDDEN,
        detail="Invalid API key"
    )

# Pydantic models
class WeatherRequest(BaseModel):
    city: str
    user: str = "anonymous"  # Optional user field for tracking

class WeatherResponse(BaseModel):
    city: str
    temperature: float
    condition: str
    suggestion: str
    user: str

class WeatherLogEntry(BaseModel):
    city: str
    temperature: float
    condition: str
    suggestion: str
    timestamp: int
    units: str
    user: str

# SQLite database setup
def init_db():
    conn = sqlite3.connect("weather.db")
    conn.execute("""
        CREATE TABLE IF NOT EXISTS weather (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            city TEXT,
            temperature REAL,
            condition TEXT,
            suggestion TEXT,
            timestamp INTEGER,
            units TEXT,
            user TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

# Fetch weather data
def get_weather(city: str, units: str = "metric"):
    params = {
        "q": city,
        "appid": OPENWEATHER_API_KEY,
        "units": units
    }
    try:
        print(f"Fetching weather for city: {city}, units: {units}")
        response = requests.get(WEATHER_API_URL, params=params)
        response.raise_for_status()
        data = response.json()
        data["units"] = units
        return data
    except requests.exceptions.RequestException as e:
        print(f"Error fetching weather data for {city}: {e}")
        return None

# Query Gemini API
def query_gemini(weather_data):
    if not weather_data:
        return "Unable to fetch weather data."
    
    city = weather_data["name"]
    temp = weather_data["main"]["temp"]
    condition = weather_data["weather"][0]["main"].lower()
    units = "°C" if weather_data["units"] == "metric" else "°F"
    prompt = f"Given the weather in {city}: {temp}{units}, {condition}, suggest an action for the user in natural language, under 50 words."
    
    mock_response = f"It’s {condition} in {city} at {temp}{units}. "
    if "rain" in condition:
        mock_response += "Bring an umbrella and wear waterproof shoes."
    elif temp < (10 if units == "°C" else 50):
        mock_response += "Wear a warm jacket to stay comfortable."
    else:
        mock_response += "Enjoy the pleasant weather!"
    
    if GEMINI_API_KEY:
        try:
            model = genai.GenerativeModel("gemini-1.5-flash")
            response = model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            print(f"Error querying Gemini API: {e}")
            return mock_response
    return mock_response

# Log weather data to SQLite
def log_weather_data(weather_data, suggestion, username: str):
    if not weather_data:
        return
    try:
        conn = sqlite3.connect("weather.db")
        conn.execute(
            "INSERT INTO weather (city, temperature, condition, suggestion, timestamp, units, user) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (
                weather_data["name"],
                weather_data["main"]["temp"],
                weather_data["weather"][0]["main"],
                suggestion,
                weather_data["dt"],
                weather_data["units"],
                username or "anonymous"
            )
        )
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"Error logging data to SQLite: {e}")

# Read weather log from SQLite
def read_weather_log(limit: int = 100):
    try:
        conn = sqlite3.connect("weather.db")
        cursor = conn.execute("SELECT city, temperature, condition, suggestion, timestamp, units, user FROM weather ORDER BY timestamp DESC LIMIT ?", (limit,))
        entries = [
            {
                "city": row[0],
                "temperature": row[1],
                "condition": row[2],
                "suggestion": row[3],
                "timestamp": row[4],
                "units": row[5],
                "user": row[6]
            }
            for row in cursor
        ]
        print(f"Fetched {len(entries)} history entries, returning last {limit}")
        conn.close()
        return entries
    except Exception as e:
        print(f"Error reading weather log from SQLite: {e}")
        return []

# Health check endpoint
@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.utcnow().isoformat()}

# Root endpoint (serves index.html)
@app.get("/", response_class=HTMLResponse)
async def read_root():
    try:
        with open("index.html", "r") as f:
            return HTMLResponse(
                content=f.read(),
                headers={"Cache-Control": "max-age=3600"}
            )
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="index.html not found")

# Weather history endpoint
@app.get("/weather/history", response_model=List[WeatherLogEntry])
async def get_weather_history(
    limit: int = Query(100, ge=1, le=1000),
    api_key: str = Depends(get_api_key)
):
    print(f"Accessing /weather/history with limit={limit}")
    entries = read_weather_log(limit)
    if not entries:
        raise HTTPException(status_code=404, detail="No weather history available")
    return entries

# Weather endpoint (GET)
@app.get("/weather/{city}", response_model=WeatherResponse)
async def get_weather_suggestion(
    city: str,
    units: str = Query("metric", enum=["metric", "imperial"]),
    user: str = Query("anonymous"),
    api_key: str = Depends(get_api_key)
):
    weather_data = get_weather(city, units)
    if not weather_data or "name" not in weather_data:
        raise HTTPException(status_code=400, detail=f"Failed to fetch weather data for {city}")
    suggestion = query_gemini(weather_data)
    log_weather_data(weather_data, suggestion, user)
    return {
        "city": weather_data["name"],
        "temperature": weather_data["main"]["temp"],
        "condition": weather_data["weather"][0]["main"],
        "suggestion": suggestion,
        "user": user
    }

# Weather endpoint (POST)
@app.post("/weather", response_model=WeatherResponse)
async def post_weather_suggestion(
    request: WeatherRequest,
    units: str = Query("metric", enum=["metric", "imperial"]),
    api_key: str = Depends(get_api_key)
):
    weather_data = get_weather(request.city, units)
    if not weather_data or "name" in weather_data:
        raise HTTPException(status_code=400, detail=f"Failed to fetch weather data for {request.city}")
    suggestion = query_gemini(weather_data)
    username = request.user or "anonymous"
    log_weather_data(weather_data, suggestion, username)
    return {
        "city": weather_data["name"],
        "temperature": weather_data["main"]["temp"],
        "condition": weather_data["weather"][0]["main"],
        "suggestion": suggestion,
        "user": username
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)